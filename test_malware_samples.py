"""
Test script for downloading and analyzing malware samples from MalwareBazaar.
"""
import os
import sys
import json
import hashlib
import requests
import logging
import tempfile
from datetime import datetime
from pathlib import Path

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from src.ember_integration.malware_categorizer import MalwareCategorizer
from src.ember_integration.behavior_analyzer import BehaviorAnalyzer
from src.ioc_integration.ioc_analyzer import IOCAnalyzer
from src.virustotal_integration.virustotal_analyzer import VirusTotalAnalyzer

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MalwareBazaarClient:
    """Client for interacting with MalwareBazaar API."""
    
    def __init__(self, api_key=None):
        self.api_key = api_key or os.environ.get('Malware_Bazzar_personal_key')
        self.base_url = "https://mb-api.abuse.ch/api/v1/"
        self.samples_dir = os.path.join(os.path.dirname(__file__), "test_samples")
        
        if not self.api_key:
            raise ValueError("MalwareBazaar API key is required")
        
        os.makedirs(self.samples_dir, exist_ok=True)
        
    def query_recent_samples(self, limit=5, tags=None):
        """Query recent samples from MalwareBazaar."""
        query_data = {
            "query": "get_recent",
            "selector": tags or "100",  # 100 = all samples
            "limit": limit
        }
        
        try:
            response = requests.post(
                self.base_url,
                data=query_data,
                timeout=60
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Error querying MalwareBazaar: {str(e)}")
            return {"query_status": "error", "data": []}
    
    def download_sample(self, sha256_hash):
        """Download a sample from MalwareBazaar by SHA256 hash."""
        sample_path = os.path.join(self.samples_dir, f"{sha256_hash}.zip")
        
        if os.path.exists(sample_path):
            logger.info(f"Sample {sha256_hash} already exists locally")
            return sample_path
        
        query_data = {
            "query": "get_file",
            "sha256_hash": sha256_hash
        }
        
        headers = {
            "API-KEY": self.api_key
        }
        
        try:
            logger.info(f"Downloading sample {sha256_hash}")
            response = requests.post(
                self.base_url,
                data=query_data,
                headers=headers,
                timeout=120
            )
            response.raise_for_status()
            
            with open(sample_path, "wb") as f:
                f.write(response.content)
            
            logger.info(f"Sample saved to {sample_path}")
            return sample_path
        except requests.RequestException as e:
            logger.error(f"Error downloading sample {sha256_hash}: {str(e)}")
            return None

def extract_behavior_from_sample_info(sample_info):
    """Extract behavior information from sample metadata."""
    behavior = {
        "file_operations": [],
        "registry_operations": [],
        "network_operations": [],
        "process_operations": [],
        "common_extensions": [],
        "common_processes": [],
        "common_ports": []
    }
    
    if sample_info.get("file_information", {}).get("file_type") == "exe":
        behavior["file_operations"].append("write")
    
    tags = sample_info.get("tags", [])
    
    if "features" not in sample_info:
        sample_info["features"] = {}
    sample_info["features"]["tags"] = tags
    
    if any(tag in ["banker", "botnet", "backdoor", "stealer"] for tag in tags):
        behavior["network_operations"].append("connect")
    
    if any(tag in ["ransomware", "ransom"] for tag in tags):
        behavior["file_operations"].extend(["encrypt", "delete"])
        behavior["common_extensions"].extend([".encrypted", ".locked", ".crypted"])
    
    if any(tag in ["keylogger", "spyware", "stealer"] for tag in tags):
        behavior["process_operations"].append("inject")
    
    if any(tag in ["mirai", "gafgyt"] for tag in tags):
        behavior["network_operations"].extend(["connect", "scan"])
        behavior["process_operations"].append("create")
    
    if any(tag in ["miner", "cryptominer"] for tag in tags):
        behavior["process_operations"].append("create")
        behavior["high_cpu_usage"] = True
    
    signature = sample_info.get("signature") or ""
    signature = signature.lower()
    if "trojan" in signature or "backdoor" in signature:
        behavior["network_operations"].append("connect")
        behavior["process_operations"].append("hide")
    
    intelligence = sample_info.get("intelligence", {})
    if intelligence:
        if "downloads" in intelligence:
            behavior["network_operations"].append("download")
        
        if "ports" in intelligence:
            for port in intelligence.get("ports", []):
                try:
                    behavior["common_ports"].append(int(port))
                except (ValueError, TypeError):
                    pass
    
    return behavior

def main():
    """Main function to test malware behavior analysis."""
    try:
        mb_client = MalwareBazaarClient()
        categorizer = MalwareCategorizer()
        behavior_analyzer = BehaviorAnalyzer()
        ioc_analyzer = IOCAnalyzer()
    except Exception as e:
        logger.error(f"Error initializing analyzers: {str(e)}")
        return
    
    logger.info("Querying recent samples from MalwareBazaar")
    response = mb_client.query_recent_samples(limit=5)
    
    if response.get("query_status") != "ok":
        logger.error("Failed to query MalwareBazaar")
        return
    
    samples = response.get("data", [])
    logger.info(f"Found {len(samples)} samples")
    
    results = []
    
    for sample in samples:
        sample_info = {
            "sha256_hash": sample.get("sha256_hash"),
            "sha1_hash": sample.get("sha1_hash"),
            "md5_hash": sample.get("md5_hash"),
            "file_name": sample.get("file_name"),
            "file_type": sample.get("file_type"),
            "file_size": sample.get("file_size"),
            "tags": sample.get("tags", []),
            "signature": sample.get("signature"),
            "first_seen": sample.get("first_seen"),
            "last_seen": sample.get("last_seen")
        }
        
        logger.info(f"Processing sample: {sample_info['file_name']} ({sample_info['sha256_hash']})")
        
        behavior = extract_behavior_from_sample_info(sample)
        
        features = {
            "file_size": sample.get("file_size", 0),
            "entropy_analysis": 7.0,  # Placeholder
            "section_info": [],
            "import_info": {},
            "export_info": [],
            "tags": sample.get("tags", [])  # Add tags to features for categorization
        }
        
        sample_id = sample.get("sha256_hash")
        categorizer.add_sample(sample_id, features, behavior)
        behavior_analyzer.add_behavior(sample_id, behavior)
        
        sample_text = json.dumps(sample)
        iocs = ioc_analyzer.extract_iocs_from_text(sample_text)
        
        print(f"DEBUG: Sample tags: {features['tags']}")
        tag_category = categorizer._determine_category_from_tags(features['tags'])
        print(f"DEBUG: Tag category: {tag_category}")
        
        category_result = categorizer.categorize_sample(features, behavior)
        
        similar_behaviors = behavior_analyzer.find_similar_behaviors(behavior)
        
        result = {
            "sample_info": sample_info,
            "behavior": behavior,
            "category": category_result,
            "similar_behaviors": similar_behaviors,
            "iocs": iocs
        }
        
        results.append(result)
        logger.info(f"Sample categorized as: {category_result.get('category')} with confidence {category_result.get('confidence')}")
    
    output_file = os.path.join(os.path.dirname(__file__), "test_results.json")
    with open(output_file, "w") as f:
        json.dump(results, f, indent=2)
    
    logger.info(f"Results saved to {output_file}")
    
    print("\n=== Malware Analysis Summary ===")
    for result in results:
        sample_info = result["sample_info"]
        category = result["category"]
        print(f"\nSample: {sample_info['file_name']}")
        print(f"SHA256: {sample_info['sha256_hash']}")
        print(f"Tags: {', '.join(sample_info['tags'])}")
        category_name = category.get('category') if category else 'Unknown'
        confidence = category.get('confidence', 0) if category else 0
        print(f"Category: {category_name} (confidence: {confidence:.2f})")
        
        behavior_pattern = 'Unknown'
        if category and isinstance(category, dict) and 'behavior_pattern_match' in category:
            if isinstance(category['behavior_pattern_match'], dict):
                behavior_pattern = category['behavior_pattern_match'].get('best_match', 'Unknown')
        print(f"Behavior Pattern: {behavior_pattern}")
        
        similar = result["similar_behaviors"]
        if similar:
            print(f"Similar samples: {len(similar)}")
            for s in similar[:2]:  # Show top 2
                print(f"  - {s['sample_id']} (similarity: {s['similarity']:.2f})")
        
        iocs = result["iocs"]
        print("IOCs found:")
        print(f"  - Domains: {len(iocs['domains'])}")
        print(f"  - IPs: {len(iocs['ips'])}")
        print(f"  - URLs: {len(iocs['urls'])}")
        print(f"  - Hashes: {len(iocs['hashes']['md5']) + len(iocs['hashes']['sha1']) + len(iocs['hashes']['sha256'])}")

if __name__ == "__main__":
    main()
