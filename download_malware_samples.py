"""
Script to download malware samples from MalwareBazaar using API key.

This script demonstrates proper API usage and error handling for MalwareBazaar.
"""

import os
import sys
import requests
import json
import logging
from datetime import datetime
from pathlib import Path

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

SAMPLES_DIR = "samples/malwarebazaar"
METADATA_DIR = f"{SAMPLES_DIR}/metadata"
os.makedirs(SAMPLES_DIR, exist_ok=True)
os.makedirs(METADATA_DIR, exist_ok=True)

def get_api_key():
    """Get the MalwareBazaar API key from environment variables."""
    api_key = os.environ.get('Malware_Bazzar_personal_key')
    if not api_key:
        logger.error("Error: MalwareBazaar API key not found.")
        logger.error("Please set the Malware_Bazzar_personal_key environment variable.")
        logger.error("Example: export Malware_Bazzar_personal_key='your_api_key_here'")
        return None
    logger.info(f"API key found (length: {len(api_key)} characters)")
    return api_key

def download_samples(query_type="get_recent", limit=3, tag=None):
    """
    Download samples from MalwareBazaar.
    
    Args:
        query_type: Type of query (default: get_recent)
        limit: Maximum number of samples to retrieve
        tag: Specific malware tag to filter by
    
    Returns:
        Boolean indicating success or failure
    """
    url = "https://mb-api.abuse.ch/api/v1/"
    api_key = get_api_key()
    
    if not api_key:
        return False
    
    data = {
        "query": query_type,
        "limit": limit
    }
    
    if tag:
        data["tag"] = tag
    
    headers = {
        "API-KEY": api_key,
        "Content-Type": "application/x-www-form-urlencoded"
    }
    
    try:
        logger.info(f"Connecting to MalwareBazaar API...")
        logger.info(f"Request data: {data}")
        response = requests.post(url, data=data, headers=headers, timeout=30)
        
        if response.status_code != 200:
            logger.error(f"HTTP Error: {response.status_code}")
            logger.error(f"Response: {response.text}")
            return False
        
        try:
            result = response.json()
        except json.JSONDecodeError:
            logger.error("Error parsing API response. The server returned invalid JSON.")
            logger.error(f"Response text: {response.text[:500]}...")
            return False
        
        if result.get("query_status") == "ok":
            logger.info(f"Successfully retrieved {len(result.get('data', []))} samples")
            return process_samples(result)
        else:
            error_reason = result.get("query_status")
            logger.error(f"API Error: {error_reason}")
            
            if error_reason == "no_results":
                logger.error("No results found. Try a different query or tag.")
            elif error_reason == "invalid_hash":
                logger.error("The provided hash is invalid.")
            elif error_reason == "no_selector":
                logger.error("Missing selector. For 'get_taginfo' query, you must provide a tag.")
                logger.error("For example: download_samples('get_taginfo', 10, 'ransomware')")
            
            return False
            
    except requests.exceptions.ConnectionError as e:
        logger.error(f"Connection error: {e}")
        logger.error("Please check your internet connection and try again.")
        return False
    except requests.exceptions.Timeout:
        logger.error("Connection timeout. The server took too long to respond.")
        return False
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return False

def process_samples(api_response):
    """
    Process downloaded samples.
    
    Args:
        api_response: JSON response from MalwareBazaar API
    
    Returns:
        Boolean indicating success or failure
    """
    samples = api_response.get("data", [])
    if not samples:
        logger.warning("No samples found in API response.")
        return False
    
    logger.info(f"Processing {len(samples)} samples...")
    
    for sample in samples:
        sha256_hash = sample.get("sha256_hash")
        if not sha256_hash:
            logger.warning("Sample missing SHA256 hash, skipping.")
            continue
        
        metadata_path = os.path.join(METADATA_DIR, f"{sha256_hash}.json")
        with open(metadata_path, "w") as f:
            json.dump(sample, f, indent=2)
        logger.info(f"Saved metadata to {metadata_path}")
        
        sample_path = download_sample(sha256_hash)
        if sample_path:
            logger.info(f"Sample downloaded to {sample_path}")
    
    return True

def download_sample(sha256_hash):
    """
    Download a specific sample by SHA256 hash.
    
    Args:
        sha256_hash: SHA256 hash of the sample to download
    
    Returns:
        Path to downloaded sample or None if download failed
    """
    url = "https://mb-api.abuse.ch/api/v1/"
    api_key = get_api_key()
    
    if not api_key:
        return None
    
    sample_path = os.path.join(SAMPLES_DIR, f"{sha256_hash}.zip")
    
    if os.path.exists(sample_path):
        logger.info(f"Sample {sha256_hash} already exists locally")
        return sample_path
    
    data = {
        "query": "get_file",
        "sha256_hash": sha256_hash
    }
    
    headers = {
        "API-KEY": api_key
    }
    
    try:
        logger.info(f"Downloading sample {sha256_hash}")
        response = requests.post(url, data=data, headers=headers, timeout=60)
        
        if response.status_code != 200:
            logger.error(f"HTTP Error: {response.status_code}")
            logger.error(f"Response: {response.text}")
            return None
        
        content_type = response.headers.get('Content-Type', '')
        if 'application/zip' not in content_type and 'application/octet-stream' not in content_type:
            logger.error(f"Unexpected content type: {content_type}")
            logger.error(f"Response may not be a valid sample: {response.text[:500]}...")
            return None
        
        with open(sample_path, "wb") as f:
            f.write(response.content)
        
        logger.info(f"Sample saved to {sample_path}")
        return sample_path
    except Exception as e:
        logger.error(f"Error downloading sample {sha256_hash}: {str(e)}")
        return None

def try_different_queries():
    """Try different query types to ensure at least one works."""
    
    logger.info("Trying 'get_recent' query...")
    if download_samples("get_recent", 3):
        return True
    
    for tag in ["ransomware", "trojan", "backdoor"]:
        logger.info(f"Trying 'get_taginfo' query with tag '{tag}'...")
        if download_samples("get_taginfo", 3, tag):
            return True
    
    logger.info("Trying 'get_malware' query...")
    if download_samples("get_malware", 3):
        return True
    
    logger.error("All query attempts failed.")
    return False

def main():
    """Main function to download samples from MalwareBazaar."""
    print("=== MalwareBazaar Sample Retrieval ===")
    
    if try_different_queries():
        print("\nSample retrieval successful!")
        
        metadata_files = list(Path(METADATA_DIR).glob("*.json"))
        sample_files = list(Path(SAMPLES_DIR).glob("*.zip"))
        
        print(f"\nDownloaded {len(sample_files)} samples")
        print(f"Saved metadata for {len(metadata_files)} samples")
        
        print("\nSample Information:")
        for metadata_file in metadata_files[:5]:  # Show up to 5 samples
            try:
                with open(metadata_file, "r") as f:
                    sample = json.load(f)
                
                print(f"\n- {sample.get('file_name', 'Unknown')} ({sample.get('sha256_hash', 'Unknown')})")
                print(f"  Type: {sample.get('file_type', 'Unknown')}")
                print(f"  Tags: {', '.join(sample.get('tags', []))}")
                print(f"  First seen: {sample.get('first_seen', 'Unknown')}")
            except Exception as e:
                logger.error(f"Error reading metadata file {metadata_file}: {str(e)}")
        
        return True
    else:
        print("\nSample retrieval failed. See error messages above.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
