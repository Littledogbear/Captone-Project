"""
Test script for downloading and analyzing malware samples from MalwareBazaar.

This script demonstrates proper API usage and error handling.
"""

import os
import sys
import requests
import json
import hashlib
import logging
from datetime import datetime
from pathlib import Path

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from src.ember_integration.malware_categorizer import MalwareCategorizer
from src.ember_integration.behavior_analyzer import BehaviorAnalyzer
from src.ioc_integration.ioc_analyzer import IOCAnalyzer
from src.virustotal_integration.virustotal_analyzer import VirusTotalAnalyzer

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

SAMPLES_DIR = "samples/malwarebazaar"
METADATA_DIR = f"{SAMPLES_DIR}/metadata"
os.makedirs(SAMPLES_DIR, exist_ok=True)
os.makedirs(METADATA_DIR, exist_ok=True)

def get_api_key():
    """Get the MalwareBazaar API key from environment variables."""
    api_key = os.environ.get('Malware_Bazzar_personal_key')
    if not api_key:
        logger.error("Error: MalwareBazaar API key not found.")
        logger.error("Please set the Malware_Bazzar_personal_key environment variable.")
        logger.error("Example: export Malware_Bazzar_personal_key='your_api_key_here'")
        return None
    logger.info(f"API key found (length: {len(api_key)} characters)")
    return api_key

def download_samples(query_type="get_recent", limit=3, tags=None):
    """
    Download samples from MalwareBazaar.
    
    Args:
        query_type: Type of query (default: get_recent)
        limit: Maximum number of samples to retrieve
        tags: Specific malware tags to filter by
    
    Returns:
        Boolean indicating success or failure
    """
    url = "https://mb-api.abuse.ch/api/v1/"
    api_key = get_api_key()
    
    if not api_key:
        return False
    
    data = {
        "query": query_type,
        "limit": limit
    }
    
    if tags:
        data["selector"] = tags
    
    headers = {
        "API-KEY": api_key,
        "Content-Type": "application/x-www-form-urlencoded"
    }
    
    try:
        logger.info(f"Connecting to MalwareBazaar API...")
        response = requests.post(url, data=data, headers=headers, timeout=30)
        response.raise_for_status()
        
        result = response.json()
        
        if result.get("query_status") == "ok":
            logger.info(f"Successfully retrieved {len(result.get('data', []))} samples")
            return process_samples(result)
        else:
            logger.error(f"API Error: {result.get('query_status')}")
            return False
            
    except requests.exceptions.ConnectionError as e:
        logger.error(f"Connection error: {e}")
        logger.error("Please check your internet connection and try again.")
        return False
    except requests.exceptions.Timeout:
        logger.error("Connection timeout. The server took too long to respond.")
        return False
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error: {e}")
        return False
    except json.JSONDecodeError:
        logger.error("Error parsing API response. The server returned invalid JSON.")
        return False
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return False

def process_samples(api_response):
    """
    Process downloaded samples.
    
    Args:
        api_response: JSON response from MalwareBazaar API
    
    Returns:
        Boolean indicating success or failure
    """
    samples = api_response.get("data", [])
    if not samples:
        logger.warning("No samples found in API response.")
        return False
    
    logger.info(f"Processing {len(samples)} samples...")
    
    for sample in samples:
        sha256_hash = sample.get("sha256_hash")
        if not sha256_hash:
            logger.warning("Sample missing SHA256 hash, skipping.")
            continue
        
        metadata_path = os.path.join(METADATA_DIR, f"{sha256_hash}.json")
        with open(metadata_path, "w") as f:
            json.dump(sample, f, indent=2)
        logger.info(f"Saved metadata to {metadata_path}")
        
        if os.environ.get("DOWNLOAD_SAMPLES") == "true":
            download_sample(sha256_hash)
    
    return True

def download_sample(sha256_hash):
    """
    Download a specific sample by SHA256 hash.
    
    Args:
        sha256_hash: SHA256 hash of the sample to download
    
    Returns:
        Path to downloaded sample or None if download failed
    """
    url = "https://mb-api.abuse.ch/api/v1/"
    api_key = get_api_key()
    
    if not api_key:
        return None
    
    sample_path = os.path.join(SAMPLES_DIR, f"{sha256_hash}.zip")
    
    if os.path.exists(sample_path):
        logger.info(f"Sample {sha256_hash} already exists locally")
        return sample_path
    
    data = {
        "query": "get_file",
        "sha256_hash": sha256_hash
    }
    
    headers = {
        "API-KEY": api_key
    }
    
    try:
        logger.info(f"Downloading sample {sha256_hash}")
        response = requests.post(url, data=data, headers=headers, timeout=60)
        response.raise_for_status()
        
        with open(sample_path, "wb") as f:
            f.write(response.content)
        
        logger.info(f"Sample saved to {sample_path}")
        return sample_path
    except Exception as e:
        logger.error(f"Error downloading sample {sha256_hash}: {str(e)}")
        return None

def analyze_samples():
    """
    Analyze downloaded samples using project components.
    
    Returns:
        Boolean indicating success or failure
    """
    try:
        categorizer = MalwareCategorizer()
        behavior_analyzer = BehaviorAnalyzer()
        ioc_analyzer = IOCAnalyzer()
        vt_analyzer = VirusTotalAnalyzer()
        
        logger.info("Initialized analyzers successfully")
    except Exception as e:
        logger.error(f"Error initializing analyzers: {str(e)}")
        return False
    
    metadata_files = list(Path(METADATA_DIR).glob("*.json"))
    if not metadata_files:
        logger.warning("No metadata files found for analysis.")
        return False
    
    logger.info(f"Analyzing {len(metadata_files)} samples...")
    results = []
    
    for metadata_file in metadata_files:
        try:
            with open(metadata_file, "r") as f:
                sample = json.load(f)
            
            sha256_hash = sample.get("sha256_hash")
            if not sha256_hash:
                continue
                
            logger.info(f"Analyzing sample: {sample.get('file_name')} ({sha256_hash})")
            
            behavior = extract_behavior_from_sample_info(sample)
            
            features = {
                "file_size": sample.get("file_size", 0),
                "entropy_analysis": 7.0,  # Placeholder
                "section_info": [],
                "import_info": {},
                "export_info": [],
                "tags": sample.get("tags", [])
            }
            
            categorizer.add_sample(sha256_hash, features, behavior)
            behavior_analyzer.add_behavior(sha256_hash, behavior)
            
            sample_text = json.dumps(sample)
            iocs = ioc_analyzer.extract_iocs_from_text(sample_text)
            
            category_result = categorizer.categorize_sample(features, behavior)
            
            similar_behaviors = behavior_analyzer.find_similar_behaviors(behavior)
            
            result = {
                "sample_info": {
                    "sha256_hash": sha256_hash,
                    "file_name": sample.get("file_name"),
                    "file_type": sample.get("file_type"),
                    "file_size": sample.get("file_size"),
                    "tags": sample.get("tags", []),
                    "signature": sample.get("signature"),
                    "first_seen": sample.get("first_seen"),
                    "last_seen": sample.get("last_seen")
                },
                "behavior": behavior,
                "category": category_result,
                "similar_behaviors": similar_behaviors,
                "iocs": iocs
            }
            
            results.append(result)
            logger.info(f"Sample categorized as: {category_result.get('category')} with confidence {category_result.get('confidence')}")
            
        except Exception as e:
            logger.error(f"Error analyzing sample {metadata_file}: {str(e)}")
    
    if not results:
        logger.warning("No results generated from analysis.")
        return False
    
    output_file = os.path.join(os.path.dirname(__file__), "malwarebazaar_results.json")
    with open(output_file, "w") as f:
        json.dump(results, f, indent=2)
    
    logger.info(f"Results saved to {output_file}")
    
    print("\n=== Malware Analysis Summary ===")
    for result in results:
        sample_info = result["sample_info"]
        category = result["category"]
        print(f"\nSample: {sample_info['file_name']}")
        print(f"SHA256: {sample_info['sha256_hash']}")
        print(f"Tags: {', '.join(sample_info['tags'])}")
        
        category_name = category.get('category') if category else 'Unknown'
        confidence = category.get('confidence', 0) if category else 0
        print(f"Category: {category_name} (confidence: {confidence:.2f})")
        
        behavior_pattern = 'Unknown'
        if category and isinstance(category, dict) and 'behavior_pattern_match' in category:
            if isinstance(category['behavior_pattern_match'], dict):
                behavior_pattern = category['behavior_pattern_match'].get('best_match', 'Unknown')
        print(f"Behavior Pattern: {behavior_pattern}")
        
        similar = result["similar_behaviors"]
        if similar:
            print(f"Similar samples: {len(similar)}")
            for s in similar[:2]:  # Show top 2
                print(f"  - {s['sample_id']} (similarity: {s['similarity']:.2f})")
        
        iocs = result["iocs"]
        print("IOCs found:")
        print(f"  - Domains: {len(iocs['domains'])}")
        print(f"  - IPs: {len(iocs['ips'])}")
        print(f"  - URLs: {len(iocs['urls'])}")
        print(f"  - Hashes: {len(iocs['hashes']['md5']) + len(iocs['hashes']['sha1']) + len(iocs['hashes']['sha256'])}")
    
    return True

def extract_behavior_from_sample_info(sample_info):
    """
    Extract behavior information from sample metadata.
    
    Args:
        sample_info: Sample metadata from MalwareBazaar
        
    Returns:
        Dictionary containing behavior information
    """
    behavior = {
        "file_operations": [],
        "registry_operations": [],
        "network_operations": [],
        "process_operations": [],
        "common_extensions": [],
        "common_processes": [],
        "common_ports": []
    }
    
    if sample_info.get("file_information", {}).get("file_type") == "exe":
        behavior["file_operations"].append("write")
    
    tags = sample_info.get("tags", [])
    
    if "features" not in sample_info:
        sample_info["features"] = {}
    sample_info["features"]["tags"] = tags
    
    if any(tag in ["banker", "botnet", "backdoor", "stealer"] for tag in tags):
        behavior["network_operations"].append("connect")
    
    if any(tag in ["ransomware", "ransom"] for tag in tags):
        behavior["file_operations"].extend(["encrypt", "delete"])
        behavior["common_extensions"].extend([".encrypted", ".locked", ".crypted"])
    
    if any(tag in ["keylogger", "spyware", "stealer"] for tag in tags):
        behavior["process_operations"].append("inject")
    
    if any(tag in ["mirai", "gafgyt"] for tag in tags):
        behavior["network_operations"].extend(["connect", "scan"])
        behavior["process_operations"].append("create")
    
    if any(tag in ["miner", "cryptominer"] for tag in tags):
        behavior["process_operations"].append("create")
        behavior["high_cpu_usage"] = True
    
    signature = sample_info.get("signature") or ""
    signature = signature.lower()
    if "trojan" in signature or "backdoor" in signature:
        behavior["network_operations"].append("connect")
        behavior["process_operations"].append("hide")
    
    intelligence = sample_info.get("intelligence", {})
    if intelligence:
        if "downloads" in intelligence:
            behavior["network_operations"].append("download")
        
        if "ports" in intelligence:
            for port in intelligence.get("ports", []):
                try:
                    behavior["common_ports"].append(int(port))
                except (ValueError, TypeError):
                    pass
    
    return behavior

def main():
    """
    Main function to download and analyze samples from MalwareBazaar.
    
    Returns:
        Boolean indicating success or failure
    """
    print("=== MalwareBazaar Sample Retrieval and Analysis ===")
    
    if download_samples(limit=3):
        print("Sample download successful.")
        if analyze_samples():
            print("Sample analysis successful.")
            return True
        else:
            print("Sample analysis failed. See error messages above.")
            return False
    else:
        print("Sample download failed. See error messages above.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
