import unittest
import os
import sys
import json
from pathlib import Path

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.ember_integration.malware_categorizer import MalwareCategorizer
from src.ember_integration.behavior_analyzer import BehaviorAnalyzer
from src.ioc_integration.ioc_analyzer import IOCAnalyzer

class TestMalwareBehavior(unittest.TestCase):
    """Test the malware behavior comparison functionality."""
    
    def setUp(self):
        self.test_dir = os.path.join(os.path.dirname(__file__), 'test_data')
        os.makedirs(self.test_dir, exist_ok=True)
        
        self.categorizer = MalwareCategorizer(self.test_dir)
        self.behavior_analyzer = BehaviorAnalyzer(self.test_dir)
        self.ioc_analyzer = IOCAnalyzer(self.test_dir)
        
    def tearDown(self):
        for file in Path(self.test_dir).glob("*.json"):
            file.unlink()
        
    def test_behavior_pattern_matching(self):
        """Test matching behavior patterns."""
        ransomware_behavior = {
            "file_operations": ["write", "encrypt", "delete"],
            "registry_operations": ["create", "modify"],
            "network_operations": ["connect"],
            "common_extensions": [".encrypted", ".locked", ".crypted"],
            "common_processes": ["vssadmin.exe", "bcdedit.exe"]
        }
        
        match_result = self.categorizer._match_behavior_pattern(ransomware_behavior)
        
        self.assertIsNotNone(match_result)
        self.assertEqual(match_result["best_match"], "ransomware")
        self.assertGreater(match_result["similarity"], 0.7)
        
    def test_behavior_similarity(self):
        """Test behavior similarity calculation."""
        behavior1 = {
            "file_operations": ["write", "read", "delete"],
            "registry_operations": ["create", "modify"],
            "network_operations": ["connect", "listen"]
        }
        
        behavior2 = {
            "file_operations": ["write", "read"],
            "registry_operations": ["create", "modify", "delete"],
            "network_operations": ["connect"]
        }
        
        similarity = self.categorizer._calculate_behavior_similarity(behavior1, behavior2)
        
        self.assertGreater(similarity, 0.5)
        self.assertLess(similarity, 1.0)
        
    def test_categorize_with_behavior(self):
        """Test categorizing a sample with behavior information."""
        sample_features = {
            "file_size": 1024,
            "entropy_analysis": 7.2,
            "section_info": [{"name": ".text", "entropy": 6.5}],
            "import_info": {"kernel32.dll": ["CreateFileA", "WriteFile"]},
            "export_info": []
        }
        
        sample_behavior = {
            "file_operations": ["write", "encrypt", "delete"],
            "registry_operations": ["create", "modify"],
            "network_operations": ["connect"],
            "common_extensions": [".encrypted", ".locked"]
        }
        
        self.categorizer.add_sample("test_sample", sample_features, sample_behavior, "ransomware")
        
        new_features = {
            "file_size": 1100,
            "entropy_analysis": 7.1,
            "section_info": [{"name": ".text", "entropy": 6.4}],
            "import_info": {"kernel32.dll": ["CreateFileA", "WriteFile"]},
            "export_info": []
        }
        
        new_behavior = {
            "file_operations": ["write", "encrypt"],
            "registry_operations": ["create"],
            "network_operations": ["connect"],
            "common_extensions": [".encrypted"]
        }
        
        result = self.categorizer.categorize_sample(new_features, new_behavior)
        
        self.assertEqual(result["category"], "ransomware")
        self.assertGreater(result["confidence"], 0.7)
        self.assertIsNotNone(result["similar_by_behavior"])
        self.assertIsNotNone(result["behavior_pattern_match"])
        
    def test_ioc_extraction(self):
        """Test extracting IOCs from text."""
        test_text = """
        Malware sample with MD5: 44d88612fea8a8f36de82e1278abb02f
        SHA1: 3395856ce81f2b7382dee72602f798b642f14140
        SHA256: 275a021bbfb6489e54d471899f7db9d1663fc695ec2fe2a2c4538aabf651fd0f
        
        Connects to domain: malicious-domain.com
        IP address: 192.168.1.1
        URL: https://evil-site.com/malware.exe
        Email: attacker@malicious.com
        
        File path: C:\\Windows\\System32\\malware.exe
        """
        
        iocs = self.ioc_analyzer.extract_iocs_from_text(test_text)
        
        self.assertIn("44d88612fea8a8f36de82e1278abb02f", iocs["hashes"]["md5"])
        self.assertIn("3395856ce81f2b7382dee72602f798b642f14140", iocs["hashes"]["sha1"])
        self.assertIn("275a021bbfb6489e54d471899f7db9d1663fc695ec2fe2a2c4538aabf651fd0f", iocs["hashes"]["sha256"])
        self.assertIn("malicious-domain.com", iocs["domains"])
        self.assertIn("192.168.1.1", iocs["ips"])
        self.assertIn("https://evil-site.com/malware.exe", iocs["urls"])
        self.assertIn("attacker@malicious.com", iocs["emails"])
        self.assertIn("C:\\Windows\\System32\\malware.exe", iocs["file_paths"])
        
    def test_behavior_analyzer(self):
        """Test the behavior analyzer functionality."""
        behavior1 = {
            "file_operations": ["write", "encrypt", "delete"],
            "registry_operations": ["create", "modify"],
            "network_operations": ["connect"],
            "process_operations": ["create"],
            "common_extensions": [".encrypted", ".locked"]
        }
        
        behavior2 = {
            "file_operations": ["write", "hide"],
            "registry_operations": ["create", "modify"],
            "network_operations": ["listen", "connect"],
            "process_operations": ["create", "hide"],
            "common_ports": [4444, 1337]
        }
        
        self.behavior_analyzer.add_behavior("sample1", behavior1)
        self.behavior_analyzer.add_behavior("sample2", behavior2)
        
        test_behavior = {
            "file_operations": ["write", "encrypt"],
            "registry_operations": ["create"],
            "network_operations": ["connect"],
            "common_extensions": [".encrypted"]
        }
        
        similar = self.behavior_analyzer.find_similar_behaviors(test_behavior)
        
        self.assertGreaterEqual(len(similar), 1)
        self.assertEqual(similar[0]["sample_id"], "sample1")
        self.assertGreater(similar[0]["similarity"], 0.6)

if __name__ == '__main__':
    unittest.main()
