"""
Test Dashboard with Multiple Malware Samples.

This script tests the monitoring dashboard with multiple malware samples.
"""

import os
import sys
import time
import logging
from datetime import datetime
import json
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from src.alerting.enhanced_real_time_monitor import EnhancedRealTimeMonitor
from src.alerting.alert_types import Alert, AlertType, AlertSeverity
from src.knowledge_graph.enhanced_graph_builder import EnhancedGraphBuilder
from src.reporting.report_generator import ReportGenerator
from src.virustotal_integration.virustotal_analyzer import VirusTotalAnalyzer
from src.ember_integration.behavior_analyzer import BehaviorAnalyzer
from src.ioc_integration.ioc_analyzer import IOCAnalyzer
from src.analysis_engine.ai_analysis_integrator import AIAnalysisIntegrator
from src.alerting.dashboard_integrator import DashboardIntegrator

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('multi_malware_dashboard_test')

monitor = EnhancedRealTimeMonitor()
graph_builder = EnhancedGraphBuilder()
report_generator = ReportGenerator()
vt_analyzer = VirusTotalAnalyzer()
behavior_analyzer = BehaviorAnalyzer()
ioc_analyzer = IOCAnalyzer()
ai_integrator = AIAnalysisIntegrator()
dashboard_integrator = DashboardIntegrator()

malware_samples = [
    {
        'sha256': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855',
        'name': 'TrojanSample.exe',
        'type': 'trojan',
        'behavior': {
            'processes': [
                {'pid': 1001, 'name': 'TrojanSample.exe', 'path': 'C:\\Windows\\Temp\\TrojanSample.exe'},
                {'pid': 1002, 'name': 'cmd.exe', 'path': 'C:\\Windows\\System32\\cmd.exe', 'parent': 1001}
            ],
            'network': [
                {'pid': 1001, 'local_addr': '192.168.1.100', 'local_port': 49152, 'remote_addr': '203.0.113.1', 'remote_port': 443},
                {'pid': 1001, 'local_addr': '192.168.1.100', 'local_port': 49153, 'remote_addr': '203.0.113.2', 'remote_port': 8080}
            ],
            'files': [
                {'pid': 1001, 'path': 'C:\\Windows\\Temp\\config.dat', 'operation': 'create'},
                {'pid': 1002, 'path': 'C:\\Users\\Admin\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\autorun.bat', 'operation': 'create'}
            ],
            'registry': [
                {'pid': 1001, 'key': 'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run', 'value': 'TrojanLoader', 'data': 'C:\\Windows\\Temp\\TrojanSample.exe', 'operation': 'set'}
            ]
        },
        'techniques': {
            'T1547': {'name': 'Boot or Logon Autostart Execution', 'confidence': 0.85},
            'T1071': {'name': 'Application Layer Protocol', 'confidence': 0.75}
        }
    },
    {
        'sha256': 'a5b1c3d2e4f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2',
        'name': 'BotnetSample.exe',
        'type': 'botnet',
        'behavior': {
            'processes': [
                {'pid': 2001, 'name': 'BotnetSample.exe', 'path': 'C:\\Users\\Admin\\Downloads\\BotnetSample.exe'},
                {'pid': 2002, 'name': 'svchost.exe', 'path': 'C:\\Windows\\System32\\svchost.exe', 'parent': 2001}
            ],
            'network': [
                {'pid': 2001, 'local_addr': '192.168.1.100', 'local_port': 49154, 'remote_addr': '198.51.100.1', 'remote_port': 6667},
                {'pid': 2002, 'local_addr': '192.168.1.100', 'local_port': 49155, 'remote_addr': '198.51.100.2', 'remote_port': 80},
                {'pid': 2002, 'local_addr': '192.168.1.100', 'local_port': 49156, 'remote_addr': '198.51.100.3', 'remote_port': 443}
            ],
            'files': [
                {'pid': 2001, 'path': 'C:\\Windows\\System32\\drivers\\etc\\hosts', 'operation': 'modify'},
                {'pid': 2002, 'path': 'C:\\ProgramData\\botnet_config.bin', 'operation': 'create'}
            ],
            'registry': [
                {'pid': 2001, 'key': 'HKLM\\SYSTEM\\CurrentControlSet\\Services\\BotnetService', 'value': 'Start', 'data': '2', 'operation': 'set'},
                {'pid': 2001, 'key': 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost', 'value': 'BotnetGroup', 'data': 'BotnetService', 'operation': 'set'}
            ]
        },
        'techniques': {
            'T1071': {'name': 'Application Layer Protocol', 'confidence': 0.9},
            'T1543': {'name': 'Create or Modify System Process', 'confidence': 0.8},
            'T1016': {'name': 'System Network Configuration Discovery', 'confidence': 0.7}
        }
    },
    {
        'sha256': 'f1e2d3c4b5a6f7e8d9c0b1a2f3e4d5c6b7a8f9e0d1c2b3a4f5e6d7c8b9a0f1e2',
        'name': 'RansomwareSample.exe',
        'type': 'ransomware',
        'behavior': {
            'processes': [
                {'pid': 3001, 'name': 'RansomwareSample.exe', 'path': 'C:\\Users\\Admin\\Desktop\\RansomwareSample.exe'},
                {'pid': 3002, 'name': 'vssadmin.exe', 'path': 'C:\\Windows\\System32\\vssadmin.exe', 'parent': 3001}
            ],
            'network': [
                {'pid': 3001, 'local_addr': '192.168.1.100', 'local_port': 49157, 'remote_addr': '203.0.113.10', 'remote_port': 443}
            ],
            'files': [
                {'pid': 3001, 'path': 'C:\\Users\\Admin\\Documents\\important.docx', 'operation': 'encrypt'},
                {'pid': 3001, 'path': 'C:\\Users\\Admin\\Pictures\\family.jpg', 'operation': 'encrypt'},
                {'pid': 3001, 'path': 'C:\\Users\\Admin\\Desktop\\RANSOM_NOTE.txt', 'operation': 'create'}
            ],
            'registry': [
                {'pid': 3001, 'key': 'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run', 'value': 'RansomLoader', 'data': 'C:\\Users\\Admin\\Desktop\\RansomwareSample.exe', 'operation': 'set'}
            ]
        },
        'techniques': {
            'T1486': {'name': 'Data Encrypted for Impact', 'confidence': 0.95},
            'T1490': {'name': 'Inhibit System Recovery', 'confidence': 0.85},
            'T1547': {'name': 'Boot or Logon Autostart Execution', 'confidence': 0.75}
        }
    }
]

def simulate_malware_detection():
    """Simulate the detection of multiple malware samples."""
    logger.info('Simulating detection of multiple malware samples')
    
    monitor.start_monitoring()
    logger.info('Real-time monitoring started')
    
    for sample in malware_samples:
        logger.info(f'Detected malware: {sample["name"]} (Type: {sample["type"]})')
        
        for process in sample['behavior']['processes']:
            alert = Alert(
                alert_type=AlertType.SUSPICIOUS_PROCESS,
                severity=AlertSeverity.HIGH,
                title=f"Suspicious Process: {process['name']}",
                description=f"Suspicious process detected: {process['name']} (PID: {process['pid']})",
                timestamp=datetime.now().isoformat(),
                source="test_dashboard",
                data={
                    'pid': process['pid'],
                    'process_name': process['name'],
                    'path': process['path']
                }
            )
            monitor.alert_manager.alert_queue.put(alert)
        
        for network in sample['behavior']['network']:
            alert = Alert(
                alert_type=AlertType.SUSPICIOUS_NETWORK,
                severity=AlertSeverity.MEDIUM,
                title=f"Suspicious Network Connection",
                description=f"Suspicious network connection to {network['remote_addr']}:{network['remote_port']}",
                timestamp=datetime.now().isoformat(),
                source="test_dashboard",
                data={
                    'pid': network['pid'],
                    'local_addr': network['local_addr'],
                    'local_port': network['local_port'],
                    'remote_addr': network['remote_addr'],
                    'remote_port': network['remote_port']
                }
            )
            monitor.alert_manager.alert_queue.put(alert)
        
        for file in sample['behavior']['files']:
            alert = Alert(
                alert_type=AlertType.SUSPICIOUS_FILE,
                severity=AlertSeverity.HIGH if file['operation'] == 'encrypt' else AlertSeverity.MEDIUM,
                title=f"Suspicious File Operation: {file['operation']}",
                description=f"Suspicious file operation: {file['operation']} on {file['path']}",
                timestamp=datetime.now().isoformat(),
                source="test_dashboard",
                data={
                    'pid': file['pid'],
                    'path': file['path'],
                    'operation': file['operation']
                }
            )
            monitor.alert_manager.alert_queue.put(alert)
        
        time.sleep(1)
    
    alerts = monitor.get_recent_alerts(limit=100)
    logger.info(f'Generated {len(alerts)} alerts')
    
    return alerts

def generate_knowledge_graph(alerts, samples):
    """Generate a knowledge graph from the alerts and samples."""
    logger.info('Generating knowledge graph')
    
    graph_data = {
        'processes': [],
        'network_connections': [],
        'file_operations': [],
        'registry_operations': []
    }
    
    for sample in samples:
        graph_data['processes'].extend(sample['behavior']['processes'])
        graph_data['network_connections'].extend(sample['behavior']['network'])
        graph_data['file_operations'].extend(sample['behavior']['files'])
        graph_data['registry_operations'].extend(sample['behavior']['registry'])
    
    graph = graph_builder.build_graph(graph_data)
    logger.info('Knowledge graph generated')
    
    timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    graph_file = f'output/test_multi_malware/multi_malware_graph_{timestamp}.json'
    
    os.makedirs('output/test_multi_malware', exist_ok=True)
    
    with open(graph_file, 'w') as f:
        json.dump(graph, f, indent=2)
    
    logger.info(f'Knowledge graph saved to {graph_file}')
    
    return graph, graph_file

def generate_report(alerts, samples, graph):
    """Generate a comprehensive report."""
    logger.info('Generating comprehensive report')
    
    analysis_data = {
        'timestamp': datetime.datetime.now().isoformat(),
        'alert_count': len(alerts),
        'malware_count': len(samples),
        'malware_types': [sample['type'] for sample in samples],
        'techniques': {},
        'processes': [],
        'network_connections': [],
        'file_operations': [],
        'registry_operations': [],
        'knowledge_graph': graph
    }
    
    for sample in samples:
        for technique_id, technique_data in sample['techniques'].items():
            if technique_id in analysis_data['techniques']:
                if technique_data['confidence'] > analysis_data['techniques'][technique_id]['confidence']:
                    analysis_data['techniques'][technique_id] = technique_data
            else:
                analysis_data['techniques'][technique_id] = technique_data
    
    for sample in samples:
        analysis_data['processes'].extend(sample['behavior']['processes'])
        analysis_data['network_connections'].extend(sample['behavior']['network'])
        analysis_data['file_operations'].extend(sample['behavior']['files'])
        analysis_data['registry_operations'].extend(sample['behavior']['registry'])
    
    ai_analysis = ai_integrator.analyze_multi_malware_scenario(samples)
    analysis_data['ai_analysis'] = ai_analysis
    
    ioc_analysis = ioc_analyzer.analyze_behavior_patterns([sample['behavior'] for sample in samples])
    analysis_data['ioc_analysis'] = ioc_analysis
    
    timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    report_file = f'output/test_multi_malware/multi_malware_report_{timestamp}.html'
    
    os.makedirs('output/test_multi_malware', exist_ok=True)
    
    report_generator.generate_report(
        analysis_data=analysis_data,
        output_file=report_file,
        report_type='comprehensive'
    )
    
    logger.info(f'Report generated and saved to {report_file}')
    
    return report_file

def main():
    """Main function to run the multi-malware test."""
    logger.info('Starting multi-malware dashboard test')
    
    try:
        dashboard_result = dashboard_integrator.start_dashboard()
        logger.info(f'Dashboard started: {dashboard_result}')
        
        time.sleep(2)
        
        alerts = simulate_malware_detection()
        
        graph, graph_file = generate_knowledge_graph(alerts, malware_samples)
        
        report_file = generate_report(alerts, malware_samples, graph)
        
        logger.info('Multi-malware dashboard test completed successfully')
        logger.info(f'Knowledge graph: {graph_file}')
        logger.info(f'Report: {report_file}')
        
        print(f'\nTest completed successfully!')
        print(f'Knowledge graph: {graph_file}')
        print(f'Report: {report_file}')
        print(f'Dashboard URL: http://127.0.0.1:8081')
        print(f'\nPress Ctrl+C to stop the test and dashboard')
        
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        logger.info('Test interrupted by user')
        print('Stopping test and dashboard...')
        
        monitor.stop_monitoring()
        
        dashboard_integrator.stop_dashboard()
        
        logger.info('Test and dashboard stopped')
        
    except Exception as e:
        logger.error(f'Error in multi-malware dashboard test: {str(e)}', exc_info=True)
        print(f'Error: {str(e)}')
        
        try:
            monitor.stop_monitoring()
        except:
            pass
        
        try:
            dashboard_integrator.stop_dashboard()
        except:
            pass

if __name__ == '__main__':
    main()
