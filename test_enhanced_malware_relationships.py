"""
Test Enhanced Malware Relationships Script.

This script tests the enhanced knowledge graph builder with host-malware
relationships and attack progression visualization.
"""

import os
import sys
import logging
import json
from pathlib import Path
from datetime import datetime

sys.path.insert(0, str(Path(__file__).parent))

from src.knowledge_graph.enhanced_malware_graph_builder import EnhancedMalwareGraphBuilder

logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_host_malware_relationship():
    """Test the host-malware relationship visualization."""
    logger.info("Testing host-malware relationship visualization...")
    
    test_data = {
        "malware_analysis": [
            {
                "file": "TestMalware.exe",
                "classification": "trojan",
                "sha256": "test_sha256",
                "tags": ["test"],
                "description": "Test malware"
            }
        ]
    }
    
    graph_builder = EnhancedMalwareGraphBuilder()
    graph = graph_builder.build_graph(test_data)
    
    assert "host_system" in graph.nodes, "Host system node not found"
    
    malware_nodes = [n for n in graph.nodes if graph.nodes[n].get('type') == 'malware']
    assert len(malware_nodes) == 1, f"Expected 1 malware node, found {len(malware_nodes)}"
    
    malware_node = malware_nodes[0]
    assert graph.has_edge(malware_node, "host_system"), "Malware-host relationship not found"
    
    logger.info("Host-malware relationship test passed")
    return True

def test_process_network_relationship():
    """Test the process-network relationship visualization."""
    logger.info("Testing process-network relationship visualization...")
    
    test_data = {
        "system_activity": {
            "processes": [
                {
                    "pid": 1234,
                    "name": "TestProcess.exe",
                    "path": "C:\\Test\\TestProcess.exe",
                    "command_line": "TestProcess.exe",
                    "user": "TestUser",
                    "start_time": "2025-03-30T10:15:30",
                    "severity": "High"
                }
            ],
            "network": [
                {
                    "process_name": "TestProcess.exe",
                    "local_addr": "192.168.1.100",
                    "local_port": 49152,
                    "remote_addr": "203.0.113.100",
                    "remote_port": 443,
                    "protocol": "TCP",
                    "state": "ESTABLISHED",
                    "severity": "High"
                }
            ]
        }
    }
    
    graph_builder = EnhancedMalwareGraphBuilder()
    graph = graph_builder.build_graph(test_data)
    
    process_nodes = [n for n in graph.nodes if graph.nodes[n].get('type') == 'process']
    assert len(process_nodes) == 1, f"Expected 1 process node, found {len(process_nodes)}"
    
    network_nodes = [n for n in graph.nodes if graph.nodes[n].get('type') == 'network']
    assert len(network_nodes) == 1, f"Expected 1 network node, found {len(network_nodes)}"
    
    process_node = process_nodes[0]
    network_node = network_nodes[0]
    assert graph.has_edge(process_node, network_node), "Process-network relationship not found"
    
    logger.info("Process-network relationship test passed")
    return True

def test_registry_file_relationships():
    """Test the registry and file relationships visualization."""
    logger.info("Testing registry and file relationships visualization...")
    
    test_data = {
        "system_activity": {
            "processes": [
                {
                    "pid": 1234,
                    "name": "TestProcess.exe",
                    "path": "C:\\Test\\TestProcess.exe",
                    "command_line": "TestProcess.exe",
                    "user": "TestUser",
                    "start_time": "2025-03-30T10:15:30",
                    "severity": "High"
                }
            ],
            "registry": [
                {
                    "process_name": "TestProcess.exe",
                    "key": "HKEY_CURRENT_USER\\Software\\Test",
                    "value": "TestValue",
                    "action": "write",
                    "severity": "High"
                }
            ],
            "files": [
                {
                    "process_name": "TestProcess.exe",
                    "path": "C:\\Test\\TestFile.txt",
                    "action": "create",
                    "severity": "High"
                }
            ]
        }
    }
    
    graph_builder = EnhancedMalwareGraphBuilder()
    graph = graph_builder.build_graph(test_data)
    
    process_nodes = [n for n in graph.nodes if graph.nodes[n].get('type') == 'process']
    assert len(process_nodes) == 1, f"Expected 1 process node, found {len(process_nodes)}"
    
    registry_nodes = [n for n in graph.nodes if graph.nodes[n].get('type') == 'registry']
    assert len(registry_nodes) == 1, f"Expected 1 registry node, found {len(registry_nodes)}"
    
    file_nodes = [n for n in graph.nodes if graph.nodes[n].get('type') == 'file']
    assert len(file_nodes) == 1, f"Expected 1 file node, found {len(file_nodes)}"
    
    process_node = process_nodes[0]
    registry_node = registry_nodes[0]
    assert graph.has_edge(process_node, registry_node), "Process-registry relationship not found"
    
    file_node = file_nodes[0]
    assert graph.has_edge(process_node, file_node), "Process-file relationship not found"
    
    logger.info("Registry and file relationships test passed")
    return True

def test_technique_relationships():
    """Test the attack technique relationships visualization."""
    logger.info("Testing attack technique relationships visualization...")
    
    test_data = {
        "malware_analysis": [
            {
                "file": "TestTrojan.exe",
                "classification": "trojan",
                "sha256": "test_sha256_1",
                "tags": ["test"],
                "description": "Test trojan"
            }
        ],
        "attack_techniques": [
            {
                "id": "T1547",
                "name": "Boot or Logon Autostart Execution",
                "confidence": 90,
                "description": "The malware establishes persistence through registry modifications."
            }
        ]
    }
    
    graph_builder = EnhancedMalwareGraphBuilder()
    graph = graph_builder.build_graph(test_data)
    
    technique_nodes = [n for n in graph.nodes if graph.nodes[n].get('type') == 'technique']
    assert len(technique_nodes) == 1, f"Expected 1 technique node, found {len(technique_nodes)}"
    
    malware_nodes = [n for n in graph.nodes if graph.nodes[n].get('type') == 'malware']
    assert len(malware_nodes) == 1, f"Expected 1 malware node, found {len(malware_nodes)}"
    
    malware_node = malware_nodes[0]
    technique_node = technique_nodes[0]
    assert graph.has_edge(malware_node, technique_node), "Malware-technique relationship not found"
    
    logger.info("Technique relationships test passed")
    return True

def main():
    """Main entry point for testing."""
    try:
        test_host_malware_relationship()
        test_process_network_relationship()
        test_registry_file_relationships()
        test_technique_relationships()
        logger.info("All tests passed successfully")
    except AssertionError as e:
        logger.error(f"Test failed: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error during testing: {str(e)}", exc_info=True)

if __name__ == "__main__":
    main()
