"""
Malware-specific knowledge graph builder for comprehensive visualization.
"""
import networkx as nx
from typing import Dict, Any, List, Optional
import logging
from datetime import datetime
import json
import os
from pathlib import Path

class MalwareGraphBuilder:
    """Builds comprehensive knowledge graphs from malware analysis data."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.graph = nx.DiGraph()
        
    def build_graph(self, data: Dict[str, Any]) -> nx.DiGraph:
        """
        Build a knowledge graph from malware analysis data.
        
        Args:
            data: Dictionary containing malware analysis data
            
        Returns:
            NetworkX DiGraph object representing the knowledge graph
        """
        self.graph = nx.DiGraph()
        
        if 'malware_analysis' in data and isinstance(data['malware_analysis'], list):
            for malware in data['malware_analysis']:
                file_name = malware.get('file')
                if file_name:
                    node_id = f"malware_{file_name}"
                    self.graph.add_node(
                        node_id,
                        type="malware",
                        file=file_name,
                        classification=malware.get("classification", "unknown"),
                        sha256=malware.get("sha256", ""),
                        tags=malware.get("tags", []),
                        description=malware.get("description", "")
                    )
        
        if 'attack_techniques' in data and isinstance(data['attack_techniques'], list):
            for technique in data['attack_techniques']:
                technique_id = technique.get('id')
                if technique_id:
                    node_id = f"technique_{technique_id}"
                    self.graph.add_node(
                        node_id,
                        type="technique",
                        id=technique_id,
                        name=technique.get("name", ""),
                        confidence=technique.get("confidence", 0),
                        description=technique.get("description", "")
                    )
        
        self._create_malware_technique_edges(data)
        
        return self.graph
    
    def _create_malware_technique_edges(self, data: Dict[str, Any]):
        """Create edges between malware and techniques based on descriptions."""
        malware_nodes = [n for n in self.graph.nodes() if self.graph.nodes[n].get('type') == 'malware']
        technique_nodes = [n for n in self.graph.nodes() if self.graph.nodes[n].get('type') == 'technique']
        
        technique_mapping = {
            "T1547": ["trojan"],  # Boot or Logon Autostart Execution -> trojan
            "T1071": ["trojan", "botnet"],  # Application Layer Protocol -> trojan, botnet
            "T1486": ["ransomware"],  # Data Encrypted for Impact -> ransomware
            "T1498": ["botnet"]  # Network Denial of Service -> botnet
        }
        
        for technique_node in technique_nodes:
            technique_id = self.graph.nodes[technique_node].get('id')
            if technique_id in technique_mapping:
                malware_types = technique_mapping[technique_id]
                
                for malware_node in malware_nodes:
                    malware_classification = self.graph.nodes[malware_node].get('classification', '').lower()
                    
                    if malware_classification in malware_types:
                        self.graph.add_edge(
                            malware_node,
                            technique_node,
                            relationship="uses",
                            confidence=self.graph.nodes[technique_node].get('confidence', 0)
                        )
        
        self._add_malware_relationships(malware_nodes)
    
    def _add_malware_relationships(self, malware_nodes):
        """Add relationships between malware samples."""
        malware_types = {}
        
        for node in malware_nodes:
            malware_type = self.graph.nodes[node].get('classification', '').lower()
            if malware_type not in malware_types:
                malware_types[malware_type] = []
            malware_types[malware_type].append(node)
        
        if 'trojan' in malware_types and 'botnet' in malware_types:
            for trojan in malware_types['trojan']:
                for botnet in malware_types['botnet']:
                    self.graph.add_edge(
                        trojan,
                        botnet,
                        relationship="communicates_with",
                        description="Trojan communicates with botnet C2"
                    )
        
        if 'trojan' in malware_types and 'ransomware' in malware_types:
            for trojan in malware_types['trojan']:
                for ransomware in malware_types['ransomware']:
                    self.graph.add_edge(
                        trojan,
                        ransomware,
                        relationship="downloads",
                        description="Trojan downloads ransomware payload"
                    )
    
    def export_graph(self, output_path: str) -> str:
        """
        Export the graph to a JSON file for visualization.
        
        Args:
            output_path: Path to save the JSON file
            
        Returns:
            Path to the saved JSON file
        """
        try:
            output_dir = os.path.dirname(output_path)
            if output_dir:
                os.makedirs(output_dir, exist_ok=True)
            
            nodes = []
            edges = []
            
            for node_id, attrs in self.graph.nodes(data=True):
                node_type = attrs.get('type', 'unknown')
                
                if node_type == 'malware':
                    label = attrs.get('file', str(node_id))
                    color = "#FF5733"  # Red for malware
                    size = 30
                elif node_type == 'technique':
                    label = f"{attrs.get('id', '')}: {attrs.get('name', '')}"
                    color = "#3357FF"  # Blue for techniques
                    size = 25
                else:
                    label = str(node_id)
                    color = "#AAAAAA"  # Gray for unknown
                    size = 20
                
                nodes.append({
                    'id': str(node_id),
                    'label': label,
                    'type': node_type,
                    'color': color,
                    'size': size,
                    'title': self._create_node_tooltip(node_id, attrs),
                    'data': {k: v for k, v in attrs.items() if k not in ['type']}
                })
            
            for source, target, attrs in self.graph.edges(data=True):
                relationship = attrs.get('relationship', 'related_to')
                
                edges.append({
                    'id': f"{source}_{target}",
                    'source': str(source),
                    'target': str(target),
                    'label': relationship,
                    'type': relationship,
                    'arrows': 'to',
                    'title': attrs.get('description', relationship)
                })
            
            graph_data = {
                'nodes': nodes,
                'edges': edges
            }
            
            with open(output_path, 'w') as f:
                json.dump(graph_data, f, indent=2)
            
            self.logger.info(f"Graph exported to {output_path}")
            return output_path
        
        except Exception as e:
            self.logger.error(f"Error exporting graph: {str(e)}")
            return ""
    
    def _create_node_tooltip(self, node_id, attrs):
        """Create HTML tooltip for node visualization."""
        node_type = attrs.get('type', 'unknown')
        
        if node_type == 'malware':
            html = f"<div style='max-width:300px;'>"
            html += f"<h3>{attrs.get('file', '')}</h3>"
            html += f"<p><strong>Type:</strong> {attrs.get('classification', 'Unknown')}</p>"
            html += f"<p><strong>SHA256:</strong> {attrs.get('sha256', 'N/A')}</p>"
            
            if 'tags' in attrs and attrs['tags']:
                html += f"<p><strong>Tags:</strong> {', '.join(attrs['tags'])}</p>"
            
            html += f"<p>{attrs.get('description', '')}</p>"
            html += "</div>"
            return html
            
        elif node_type == 'technique':
            html = f"<div style='max-width:300px;'>"
            html += f"<h3>{attrs.get('id', '')}: {attrs.get('name', '')}</h3>"
            html += f"<p><strong>Confidence:</strong> {attrs.get('confidence', 0)}%</p>"
            html += f"<p>{attrs.get('description', '')}</p>"
            html += "</div>"
            return html
            
        return str(node_id)
